# Importing necessary libraries
import pandas as pd
import numpy as np
from sklearn.datasets import load_iris, load_wine
from sklearn.model_selection import train_test_split
from sklearn.tree import DecisionTreeClassifier
from sklearn.ensemble import BaggingClassifier
from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score, confusion_matrix

# Function to evaluate classifier performance
def evaluate_model(model, X_test, y_test):
    y_pred = model.predict(X_test)
    accuracy = accuracy_score(y_test, y_pred)
    precision = precision_score(y_test, y_pred, average='weighted')
    recall = recall_score(y_test, y_pred, average='weighted')
    f1 = f1_score(y_test, y_pred, average='weighted')
    cm = confusion_matrix(y_test, y_pred)
    return accuracy, precision, recall, f1, cm

# Loading datasets
datasets = [("Iris", load_iris()), ("Wine", load_wine())]
print()
for name, dataset in datasets:
    # Splitting data into features and target
    X = dataset.data
    y = dataset.target
    
    # Splitting into training (75%) and testing (25%)
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.25, random_state=42)

    print(f"Dataset: {name}")
    
    # Decision Tree Classifier
    dt = DecisionTreeClassifier(random_state=42)
    dt.fit(X_train, y_train)
    dt_accuracy, dt_precision, dt_recall, dt_f1, dt_cm = evaluate_model(dt, X_test, y_test)
    
    print("Decision Tree Performance:")
    print(f"Accuracy: {dt_accuracy:.4f}, Precision: {dt_precision:.4f}, Recall: {dt_recall:.4f}, F1 Score: {dt_f1:.4f}")
    print(f"Confusion Matrix:\n{dt_cm}\n")
    
    # Bagging with varying number of estimators
    for n_estimators in [3, 5, 7, 9]:
        bagging = BaggingClassifier(
            estimator=DecisionTreeClassifier(random_state=42),  # Changed from base_estimator to estimator
            n_estimators=n_estimators,
            random_state=42
        )
        bagging.fit(X_train, y_train)
        bag_accuracy, bag_precision, bag_recall, bag_f1, bag_cm = evaluate_model(bagging, X_test, y_test)
        
        print(f"Bagging with {n_estimators} Decision Trees Performance:")
        print(f"Accuracy: {bag_accuracy:.4f}, Precision: {bag_precision:.4f}, Recall: {bag_recall:.4f}, F1 Score: {bag_f1:.4f}")
        print(f"Confusion Matrix:\n{bag_cm}\n")