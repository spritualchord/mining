import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.tree import DecisionTreeClassifier
from sklearn.ensemble import AdaBoostClassifier
from sklearn.metrics import accuracy_score, classification_report, confusion_matrix
from sklearn.preprocessing import LabelEncoder
import matplotlib.pyplot as plt
import seaborn as sns

url_pima_diabetes = "https://raw.githubusercontent.com/jbrownlee/Datasets/master/pima-indians-diabetes.data.csv"
pima_columns = ['Pregnancies', 'Glucose', 'BloodPressure', 'SkinThickness', 'Insulin', 'BMI', 'DiabetesPedigreeFunction', 'Age', 'Outcome']
pima_data = pd.read_csv(url_pima_diabetes, header=None, names=pima_columns)

url_mushroom = "https://archive.ics.uci.edu/ml/machine-learning-databases/mushroom/agaricus-lepiota.data"
mushroom_columns = ['Class', 'CapShape', 'CapSurface', 'CapColor', 'Bruises', 'Odor', 'GillAttachment', 'GillSpacing',
                    'GillSize', 'GillColor', 'StalkShape', 'StalkRoot', 'StalkSurfaceAboveRing',
                    'StalkSurfaceBelowRing', 'StalkColorAboveRing', 'StalkColorBelowRing', 'VeilType',
                    'VeilColor', 'RingNumber', 'RingType', 'SporePrintColor', 'Population', 'Habitat']
mushroom_data = pd.read_csv(url_mushroom, header=None, names=mushroom_columns)

# Preprocess Datasets
label_encoders = {}
for column in mushroom_data.columns:
    le = LabelEncoder()
    mushroom_data[column] = le.fit_transform(mushroom_data[column])
    label_encoders[column] = le

# Split datasets into features and target
X_pima_features, y_pima_target = pima_data.drop('Outcome', axis=1), pima_data['Outcome']
X_mushroom_features, y_mushroom_target = mushroom_data.drop('Class', axis=1), mushroom_data['Class']

# Split datasets into training (75%) and test sets (25%)
X_train_pima, X_test_pima, y_train_pima, y_test_pima = train_test_split(X_pima_features, y_pima_target, test_size=0.25, random_state=42)
X_train_mushroom, X_test_mushroom, y_train_mushroom, y_test_mushroom = train_test_split(X_mushroom_features, y_mushroom_target, test_size=0.25, random_state=42)

# Decision Tree Classifier
decision_tree = DecisionTreeClassifier(random_state=42)

# Train and evaluate on Pima Indians Diabetes Dataset
decision_tree.fit(X_train_pima, y_train_pima)
y_pred_pima_dt = decision_tree.predict(X_test_pima)
print("\nDecision Tree Classifier on Pima Indians Diabetes Dataset:")
print("Accuracy:", accuracy_score(y_test_pima, y_pred_pima_dt))
print(classification_report(y_test_pima, y_pred_pima_dt))

# Train and evaluate on Mushroom Dataset
decision_tree.fit(X_train_mushroom, y_train_mushroom)
y_pred_mushroom_dt = decision_tree.predict(X_test_mushroom)
print("\nDecision Tree Classifier on Mushroom Dataset:")
print("Accuracy:", accuracy_score(y_test_mushroom, y_pred_mushroom_dt))
print(classification_report(y_test_mushroom, y_pred_mushroom_dt))

# Function to train AdaBoost Classifier with different numbers of estimators
def evaluate_adaboost(X_train, X_test, y_train, y_test, n_estimators_list):
    accuracies = []
    for n in n_estimators_list:
        ada_boost = AdaBoostClassifier(
            estimator=DecisionTreeClassifier(random_state=42),  # Updated parameter name
            n_estimators=n, random_state=42
        )
        ada_boost.fit(X_train, y_train)
        y_pred_ada = ada_boost.predict(X_test)
        accuracy = accuracy_score(y_test, y_pred_ada)
        accuracies.append(accuracy)
        print(f"AdaBoost with {n} Decision Trees:")
        print("Accuracy:", accuracy)
        print(classification_report(y_test, y_pred_ada))
        print("Confusion Matrix:\n", confusion_matrix(y_test, y_pred_ada))
        print("-" * 50)
    return accuracies

# Evaluate AdaBoost on Pima Indians Diabetes Dataset
print("\nAdaBoost Performance on Pima Indians Diabetes Dataset:")
pima_accuracies = evaluate_adaboost(X_train_pima, X_test_pima, y_train_pima, y_test_pima, n_estimators_list=[3, 5, 7, 9])

# Evaluate AdaBoost on Mushroom Dataset
print("\nAdaBoost Performance on Mushroom Dataset:")
mushroom_accuracies = evaluate_adaboost(X_train_mushroom, X_test_mushroom, y_train_mushroom, y_test_mushroom, n_estimators_list=[3, 5, 7, 9])