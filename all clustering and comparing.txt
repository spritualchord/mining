import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.cluster import KMeans
from sklearn.cluster import AgglomerativeClustering
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import silhouette_score
from sklearn.datasets import make_blobs
from sklearn.cluster import DBSCAN

# Step 1: Load Dataset
# Replace this line with the loading of your CSV file
# data = pd.read_csv('your_dataset.csv')

# For demonstration, we're using a synthetic dataset
# X, _ = make_blobs(n_samples=500, centers=4, cluster_std=0.60, random_state=42)

# Step 2: Preprocess the Data (Standard Scaling)
# Select numerical columns only if needed
numerical_columns = data.select_dtypes(include=[np.number]).columns
X = data[numerical_columns]

scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)

# Step 3: K-Means Clustering
def kmeans_clustering(X, n_clusters=4):
    kmeans = KMeans(n_clusters=n_clusters, random_state=42)
    kmeans.fit(X)
    return kmeans.labels_

# Try different number of clusters for K-Means
kmeans_labels = kmeans_clustering(X_scaled, n_clusters=4)

# Step 4: Agglomerative (Hierarchical) Clustering
def agglomerative_clustering(X, n_clusters=4, linkage_method='ward'):
    agg_clust = AgglomerativeClustering(n_clusters=n_clusters, linkage=linkage_method)
    return agg_clust.fit_predict(X)

# Try different linkage methods and number of clusters for Agglomerative
agg_labels = agglomerative_clustering(X_scaled, n_clusters=4, linkage_method='ward')

# Step 5: DBSCAN Clustering
def dbscan_clustering(X, eps=0.5, min_samples=5):
    dbscan = DBSCAN(eps=eps, min_samples=min_samples)
    return dbscan.fit_predict(X)

# Try different eps and min_samples for DBSCAN
dbscan_labels = dbscan_clustering(X_scaled, eps=0.5, min_samples=5)

# Step 6: Evaluate Clustering with Silhouette Score
def evaluate_clustering(X, labels):
    return silhouette_score(X, labels)

kmeans_score = evaluate_clustering(X_scaled, kmeans_labels)
agg_score = evaluate_clustering(X_scaled, agg_labels)
dbscan_score = evaluate_clustering(X_scaled, dbscan_labels)

# Step 7: Plotting Clusters
plt.figure(figsize=(12, 8))

# Plot K-Means Clusters
plt.subplot(1, 3, 1)
plt.title(f"K-Means Clustering (Score: {kmeans_score:.3f})")
plt.scatter(X_scaled[:, 0], X_scaled[:, 1], c=kmeans_labels, cmap='viridis', s=50)

# Plot Agglomerative Clusters
plt.subplot(1, 3, 2)
plt.title(f"Agglomerative Clustering (Score: {agg_score:.3f})")
plt.scatter(X_scaled[:, 0], X_scaled[:, 1], c=agg_labels, cmap='viridis', s=50)

# Plot DBSCAN Clusters
plt.subplot(1, 3, 3)
plt.title(f"DBSCAN Clustering (Score: {dbscan_score:.3f})")
plt.scatter(X_scaled[:, 0], X_scaled[:, 1], c=dbscan_labels, cmap='viridis', s=50)

plt.tight_layout()
plt.show()

# Step 8: Print Silhouette Scores for Comparison
print(f"K-Means Silhouette Score: {kmeans_score:.3f}")
print(f"Agglomerative Silhouette Score: {agg_score:.3f}")
print(f"DBSCAN Silhouette Score: {dbscan_score:.3f}")
